<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Cyberpunk Typing Game</title>
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: "Courier New", monospace;
      }

      body {
        background-color: #000000;
        color: #00f7ff;
        min-height: 100vh;
        display: flex;
        justify-content: center;
        align-items: center;
        overflow: hidden;
      }

      .container {
        width: 100%;
        max-width: 1200px;
        height: 800px;
        position: relative;
        display: flex;
        flex-direction: column;
        gap: 20px;
        padding: 20px;
      }

      .game-container {
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.8);
        border: 2px solid #00f7ff;
        box-shadow: 0 0 20px #00f7ff;
        overflow: hidden;
        position: relative;
      }

      .game-area {
        width: 100%;
        height: 100%;
        position: relative;
      }

      .stats {
        position: absolute;
        top: 20px;
        left: 20px;
        font-size: 1.5em;
        z-index: 100;
        color: #00f7ff;
        text-shadow: 0 0 5px #00f7ff;
        display: flex;
        flex-direction: column;
        gap: 10px;
      }

      .game-status {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        font-size: 3em;
        color: #ff00ff;
        text-shadow: 0 0 10px #ff00ff;
        display: none;
      }

      .game-status.visible {
        display: block;
      }

      .input-container {
        width: 100%;
        padding: 20px;
        background-color: rgba(0, 0, 0, 0.8);
        border: 2px solid #00f7ff;
        box-shadow: 0 0 20px #00f7ff;
        display: flex;
        align-items: center;
      }

      #word-input {
        flex: 1;
        padding: 15px;
        background: none;
        border: 2px solid #ff00ff;
        color: #00f7ff;
        font-size: 1.5em;
        text-align: center;
        outline: none;
      }

      .screen {
        position: absolute;
        width: 100%;
        height: 100%;
        display: none;
      }

      .screen.active {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        gap: 20px;
      }

      .title {
        font-size: 3em;
        text-shadow: 0 0 10px #00f7ff;
        margin-bottom: 30px;
        color: #00f7ff;
      }

      .btn {
        background: none;
        border: 2px solid #00f7ff;
        color: #00f7ff;
        padding: 15px 30px;
        font-size: 1.2em;
        cursor: pointer;
        transition: all 0.3s;
        text-transform: uppercase;
        letter-spacing: 2px;
      }

      .btn:hover {
        background-color: #ff00ff;
        border-color: #ff00ff;
        color: #000;
        box-shadow: 0 0 20px #ff00ff;
      }

      .falling-object {
        position: absolute;
        display: flex;
        align-items: center;
        justify-content: center;
        flex-direction: column;
      }

      .falling-object .shape {
        font-size: 4em;
        color: #00f7ff;
        text-shadow: 0 0 10px #00f7ff;
        transform-origin: center;
        animation: pulse 2s infinite;
      }

      .falling-object .word {
        font-size: 1em;
        color: #00f7ff;
        text-shadow: 0 0 5px #00f7ff;
        margin-top: -10px;
      }

      @keyframes pulse {
        0% {
          transform: scale(1);
        }
        50% {
          transform: scale(1.1);
        }
        100% {
          transform: scale(1);
        }
      }

      .leaderboard {
        width: 90%;
        max-width: 1000px;
        margin: 20px auto;
        padding: 40px;
        background: rgba(0, 0, 0, 0.95);
        position: relative;
        overflow: hidden;
      }

      .leaderboard-container {
        border: 3px solid #00f7ff;
        padding: 40px;
        box-shadow: 0 0 30px #00f7ff, inset 0 0 20px rgba(0, 247, 255, 0.3);
        position: relative;
        overflow: hidden;
        background: linear-gradient(45deg, rgba(0, 0, 0, 0.95), rgba(0, 247, 255, 0.05));
      }

      .leaderboard-container::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 3px;
        background: linear-gradient(90deg, transparent, #00f7ff, transparent);
        animation: scan-line 2s linear infinite;
      }

      @keyframes scan-line {
        0% {
          transform: translateX(-100%);
        }
        100% {
          transform: translateX(100%);
        }
      }

      .leaderboard-title {
        font-size: 3.5em;
        text-align: center;
        margin-bottom: 40px;
        color: #00f7ff;
        text-transform: uppercase;
        letter-spacing: 5px;
        text-shadow: 0 0 15px #00f7ff;
        position: relative;
        animation: glow 2s ease-in-out infinite alternate;
      }

      @keyframes glow {
        from {
          text-shadow: 0 0 15px #00f7ff, 0 0 25px #00f7ff;
        }
        to {
          text-shadow: 0 0 30px #00f7ff, 0 0 40px #00f7ff;
        }
      }

      .leaderboard-header {
        display: grid;
        grid-template-columns: 100px 2fr 1fr 1fr;
        gap: 20px;
        padding: 15px 20px;
        border-bottom: 2px solid #ff00ff;
        margin-bottom: 20px;
        font-size: 1.4em;
        text-transform: uppercase;
        letter-spacing: 2px;
        color: #ff00ff;
        text-shadow: 0 0 10px #ff00ff;
      }

      .leaderboard-item {
        display: grid;
        grid-template-columns: 100px 2fr 1fr 1fr;
        gap: 20px;
        margin: 15px 0;
        padding: 20px;
        border: 2px solid #00f7ff;
        background: rgba(0, 247, 255, 0.05);
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
      }

      .leaderboard-item:hover {
        transform: translateX(10px);
        background: rgba(0, 247, 255, 0.1);
        box-shadow: 0 0 20px rgba(0, 247, 255, 0.4);
      }

      .leaderboard-item::after {
        content: "";
        position: absolute;
        left: 0;
        bottom: 0;
        width: 100%;
        height: 2px;
        background: linear-gradient(90deg, #00f7ff, transparent);
      }

      .rank {
        font-size: 1.8em;
        font-weight: bold;
        color: #ff00ff;
        text-shadow: 0 0 8px #ff00ff;
        display: flex;
        align-items: center;
      }

      .username {
        font-size: 1.6em;
        color: #00f7ff;
        text-shadow: 0 0 8px #00f7ff;
        display: flex;
        align-items: center;
      }

      .score,
      .wpm {
        font-size: 1.6em;
        color: #00f7ff;
        text-shadow: 0 0 8px #00f7ff;
        display: flex;
        align-items: center;
        justify-content: center;
      }

      .back-btn {
        position: relative;
        margin-top: 40px;
        padding: 20px 50px;
        background: none;
        border: 3px solid #ff00ff;
        color: #ff00ff;
        font-size: 1.4em;
        text-transform: uppercase;
        letter-spacing: 3px;
        cursor: pointer;
        transition: all 0.3s;
        overflow: hidden;
      }

      .back-btn:hover {
        background: #ff00ff;
        color: #000;
        box-shadow: 0 0 30px #ff00ff;
      }

      .lives {
        position: absolute;
        top: 20px;
        right: 20px;
        display: flex;
        gap: 10px;
      }

      .life {
        width: 20px;
        height: 20px;
        background-color: #ff00ff;
        border-radius: 50%;
        box-shadow: 0 0 10px #ff00ff;
      }
    </style>
  </head>
  <body>
    <!-- Add Supabase JS library -->
    <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2.39.3/dist/umd/supabase.min.js"></script>
    <!-- Add environment configuration -->
    <script src="/env-config.js"></script>
    <div class="container">
      <div id="home-screen" class="screen active">
        <h1 class="title">Cyberpunk Typing</h1>
        <button class="btn" id="play-btn" onclick="checkAuthAndPlay()">
          Play Game
        </button>
        <button class="btn" onclick="showScreen('leaderboard-screen')">
          Leaderboard
        </button>
        <button class="btn" id="login-btn" onclick="signInWithGoogle()">
          Sign in with Google
        </button>
        <button
          class="btn"
          id="logout-btn"
          onclick="logout()"
          style="display: none"
        >
          Logout
        </button>
      </div>

      <div id="game-screen" class="screen">
        <div class="game-container">
          <div class="game-area">
            <div class="stats">
              <div>Score: <span id="score">0</span></div>
              <div>Lives: <span id="lives-text">3</span></div>
            </div>
            <div class="game-status" id="game-status">PAUSED</div>
            <div class="lives" id="lives"></div>
          </div>
        </div>
        <div class="input-container">
          <input
            type="text"
            id="word-input"
            placeholder="Type the word..."
            autocomplete="off"
          />
        </div>
      </div>

      <div id="end-screen" class="screen">
        <h2 class="title">Game Over</h2>
        <p>Final Score: <span id="final-score">0</span></p>
        <p>Typing Speed: <span id="typing-speed">0</span> WPM</p>
        <button class="btn" onclick="restartGame()">Play Again</button>
        <button class="btn" onclick="showScreen('leaderboard-screen')">
          Leaderboard
        </button>
        <button class="btn" onclick="showScreen('home-screen')">Home</button>
      </div>

      <div id="leaderboard-screen" class="screen">
        <div class="leaderboard" id="leaderboard">
          <!-- Leaderboard content will be dynamically inserted here -->
        </div>
        <button class="back-btn" onclick="showScreen('home-screen')">
          Back to Home
        </button>
      </div>
    </div>

    <script>
      // Initialize Supabase client
      const supabaseUrl = window.SUPABASE_URL;
      const supabaseKey = window.SUPABASE_ANON_KEY;
      let supabase;

      if (!supabaseUrl || !supabaseKey) {
        console.error(
          "Supabase configuration missing. Please check your environment variables."
        );
      }

      try {
        supabase = window.supabase.createClient(supabaseUrl, supabaseKey);
      } catch (error) {
        console.error("Supabase initialization error:", error);
        // Fallback to local storage if Supabase fails
        supabase = {
          auth: {
            getUser: async () => ({ data: { user: null }, error: null }),
            signInWithOAuth: async () => ({
              data: { user: null },
              error: new Error("Supabase not configured"),
            }),
            signOut: async () => ({ error: null }),
          },
          from: () => ({
            select: () => ({ data: [], error: null }),
            insert: () => ({ error: null }),
            eq: () => ({ data: [], error: null }),
            single: () => ({ data: null, error: null }),
            order: () => ({ limit: () => ({ data: [], error: null }) }),
          }),
        };
      }

      // Authentication state
      let currentUser = null;

      // Check if user is logged in on page load
      async function checkAuth() {
        const {
          data: { user },
          error,
        } = await supabase.auth.getUser();
        if (user) {
          currentUser = user;
          updateAuthUI(true);
        } else {
          updateAuthUI(false);
        }
      }

      // Update UI based on auth state
      function updateAuthUI(isLoggedIn) {
        document.getElementById("login-btn").style.display = isLoggedIn
          ? "none"
          : "block";
        document.getElementById("logout-btn").style.display = isLoggedIn
          ? "block"
          : "none";
      }

      // Sign in with Google
      async function signInWithGoogle() {
        try {
          const { error } = await supabase.auth.signInWithOAuth({
            provider: "google",
            options: {
              queryParams: {
                access_type: "offline",
                prompt: "consent",
              },
            },
          });

          if (error) throw error;
        } catch (error) {
          console.error("Error signing in with Google:", error.message);
        }
      }

      // Check auth before starting game
      async function checkAuthAndPlay() {
        if (currentUser) {
          showScreen("game-screen");
        } else {
          // Ask if they want to play as guest or sign in
          if (
            confirm(
              "Would you like to sign in to save your scores? Click Cancel to play as guest."
            )
          ) {
            signInWithGoogle();
          } else {
            showScreen("game-screen");
          }
        }
      }

      // Logout
      async function logout() {
        await supabase.auth.signOut();
        currentUser = null;
        updateAuthUI(false);
        showScreen("home-screen");
      }

      // Update leaderboard
      async function updateLeaderboard(score, wpm) {
        if (!currentUser) return;

        try {
          // Get or create user profile
          let { data: profile } = await supabase
            .from("profiles")
            .select("username")
            .eq("id", currentUser.id)
            .single();

          if (!profile) {
            // Create profile if it doesn't exist
            const username =
              currentUser.user_metadata.full_name ||
              currentUser.user_metadata.name ||
              currentUser.email.split("@")[0];

            await supabase.from("profiles").insert([
              {
                id: currentUser.id,
                username: username,
                email: currentUser.email,
              },
            ]);

            profile = { username };
          }

          // Insert score
          await supabase.from("scores").insert([
            {
              user_id: currentUser.id,
              username: profile.username,
              score: score,
              wpm: wpm,
            },
          ]);

          // Update leaderboard display
          await fetchLeaderboard();
        } catch (error) {
          console.error("Error updating leaderboard:", error);
        }
      }

      // Fetch leaderboard data
      async function fetchLeaderboard() {
        try {
          const { data: scores, error } = await supabase
            .from("scores")
            .select("username, score, wpm")
            .order("score", { ascending: false })
            .order("wpm", { ascending: false })
            .limit(10);

          if (error) throw error;

          const leaderboardElement = document.getElementById("leaderboard");
          leaderboardElement.innerHTML = `
            <div class="leaderboard-container">
              <h2 class="leaderboard-title">CYBERPUNK ELITE</h2>
              <div style="text-align: center; color: #ff00ff; margin-bottom: 30px; font-size: 1.2em; text-transform: uppercase; letter-spacing: 3px;">Top Typing Warriors</div>
              <div class="leaderboard-header">
                <div>RANK</div>
                <div>PLAYER</div>
                <div>SCORE</div>
                <div>WPM</div>
              </div>
              ${scores
                .map(
                  (entry, index) => `
                  <div class="leaderboard-item">
                    <div class="rank">#${index + 1}</div>
                    <div class="username">${entry.username}</div>
                    <div class="score">${entry.score}</div>
                    <div class="wpm">${entry.wpm}</div>
                  </div>
                `
                )
                .join("")}
            </div>
          `;
        } catch (error) {
          console.error("Error fetching leaderboard:", error);
        }
      }

      // Show different screens
      function showScreen(screenId) {
        // Hide all screens
        document
          .querySelectorAll(".screen")
          .forEach((screen) => screen.classList.remove("active"));

        // Show the selected screen
        document.getElementById(screenId).classList.add("active");

        // If showing leaderboard, fetch latest data
        if (screenId === "leaderboard-screen") {
          fetchLeaderboard();
        }

        // If showing game screen, start the game
        if (screenId === "game-screen") {
          startGame();
        }
      }

      // Game variables
      let score = 0;
      let lives = 3;
      let gameLoop;
      let words = [];
      let startTime;
      let wordsTyped = 0;

      // Initialize game
      function startGame() {
        // Reset game state
        score = 0;
        lives = 3;
        words = [];
        wordsTyped = 0;
        startTime = Date.now();
        document.getElementById("score").textContent = score;
        document.getElementById("lives-text").textContent = lives;
        updateLives();

        // Clear any existing game loop
        if (gameLoop) clearInterval(gameLoop);

        // Start game loop
        gameLoop = setInterval(gameUpdate, 2000);

        // Focus on input
        document.getElementById("word-input").focus();

        // Hide game status
        document.getElementById("game-status").classList.remove("visible");
      }

      // Update lives display
      function updateLives() {
        const livesContainer = document.getElementById("lives");
        livesContainer.innerHTML = "";
        for (let i = 0; i < lives; i++) {
          const life = document.createElement("div");
          life.className = "life";
          livesContainer.appendChild(life);
        }
      }

      // Game update loop
      function gameUpdate() {
        if (words.length < 5) {
          createWord();
        }

        // Move existing words down
        words.forEach((word) => {
          word.element.style.top =
            parseFloat(word.element.style.top || 0) + 1 + "%";

          // Check if word has reached bottom
          if (parseFloat(word.element.style.top) > 90) {
            removeWord(word);
            lives--;
            document.getElementById("lives-text").textContent = lives;
            updateLives();

            if (lives <= 0) {
              endGame();
            }
          }
        });
      }

      // Create a new word
      function createWord() {
        const words = [
          "hack",
          "cyber",
          "neural",
          "matrix",
          "virus",
          "data",
          "code",
          "system",
          "network",
          "binary",
          "decrypt",
          "firewall",
          "protocol",
          "quantum",
          "virtual",
          "encrypt",
          "server",
          "breach",
          "secure",
          "access",
        ];
        const shapes = ["◆", "◇", "□", "■", "△", "▲", "○", "●"];
        const word = words[Math.floor(Math.random() * words.length)];
        const shape = shapes[Math.floor(Math.random() * shapes.length)];

        const wordElement = document.createElement("div");
        wordElement.className = "falling-object";
        wordElement.innerHTML = `
          <div class="shape">${shape}</div>
          <div class="word">${word}</div>
        `;

        // Random horizontal position
        const left = Math.random() * 80 + 10;
        wordElement.style.left = left + "%";
        wordElement.style.top = "0%";

        document.querySelector(".game-area").appendChild(wordElement);

        words.push({
          text: word,
          element: wordElement,
        });
      }

      // Remove a word
      function removeWord(word) {
        word.element.remove();
        words = words.filter((w) => w !== word);
      }

      // Handle input
      document.getElementById("word-input").addEventListener("input", (e) => {
        const input = e.target.value.toLowerCase();
        const matchedWord = words.find((word) => word.text === input);

        if (matchedWord) {
          removeWord(matchedWord);
          score += 10;
          wordsTyped++;
          document.getElementById("score").textContent = score;
          e.target.value = "";
        }
      });

      // End game
      function endGame() {
        clearInterval(gameLoop);
        const endTime = Date.now();
        const timeInMinutes = (endTime - startTime) / 1000 / 60;
        const wpm = Math.round(wordsTyped / timeInMinutes);

        document.getElementById("final-score").textContent = score;
        document.getElementById("typing-speed").textContent = wpm;

        // Update leaderboard if user is logged in
        updateLeaderboard(score, wpm);

        showScreen("end-screen");
      }

      // Restart game
      function restartGame() {
        // Clear existing words
        words.forEach((word) => word.element.remove());
        words = [];

        // Start new game
        showScreen("game-screen");
      }

      // Handle pause/resume with Escape key
      document.addEventListener("keydown", (e) => {
        if (e.key === "Escape" && document.getElementById("game-screen").classList.contains("active")) {
          const gameStatus = document.getElementById("game-status");
          if (gameLoop) {
            // Pause game
            clearInterval(gameLoop);
            gameLoop = null;
            gameStatus.textContent = "PAUSED";
            gameStatus.classList.add("visible");
          } else {
            // Resume game
            gameLoop = setInterval(gameUpdate, 2000);
            gameStatus.classList.remove("visible");
          }
        }
      });

      // Check authentication on page load
      checkAuth();
    </script>
  </body>
</html> 